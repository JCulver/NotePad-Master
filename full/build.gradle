buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
        // the latest version of the android-apt plugin for annotations
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.2'
    }
}

apply plugin: 'android'
/*
 * Copyright (c) 2014 Jonas Kalderstam.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// For annotations
apply plugin: 'android-apt'
def AAVersion = '3.0.1'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.android.support:support-v4:19.0.1+'
    compile project(':core')
    // annotations
    apt "org.androidannotations:androidannotations:$AAVersion"
    compile "org.androidannotations:androidannotations-api:$AAVersion"
    // Tests
    androidTestCompile 'com.squareup.spoon:spoon-client:1.1.1+'
    //  androidTestCompile 'org.robolectric:robolectric:2.+'
    // androidTestCompile 'junit:junit:4.+'
}

configurations {
    apt
}

// annotations
apt {
    arguments {
        resourcePackageName android.defaultConfig.packageName
        androidManifestFile variant.processResources.manifestFile
        // If you're using Android NBS flavors you should use the
        //following line instead of hard-coded packageName
        //resourcePackageName android.defaultConfig.packageName
        //resourcePackageName 'com.nononsenseapps'

        // You can set optional annotation processing options here,
        // like these commented options:
        // logLevel 'INFO'
        // logFile '/var/log/aa.log'
    }
}

def getVersionName = { ->
  try {
  def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
  } catch (Exception e) {
    return "GITFAILEDINGRADLE"
  }
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        packageName "com.nononsenseapps.notepad"
        versionCode 109
        versionName getVersionName()

        testPackageName "com.nononsenseapps.notepad.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }

    sourceSets {
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')

        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        androidTest {
            java.srcDirs = ['test/src']
            resources.srcDirs = ['test/src']
            aidl.srcDirs = ['test/src']
            renderscript.srcDirs = ['test/src']
            res.srcDirs = ['test/res']
            assets.srcDirs = ['test/assets']
        }
    }

    if (project.hasProperty('STORE_FILE')) {
      signingConfigs {
        release {
          storeFile file(STORE_FILE)
          storePassword STORE_PASSWORD
          keyAlias KEY_ALIAS
          keyPassword KEY_PASSWORD
        }
      }

      buildTypes {
        release {
          signingConfig signingConfigs.release
        }
      }
    } else {
      println "No key store defined. Signed release not available..."
    }
}
